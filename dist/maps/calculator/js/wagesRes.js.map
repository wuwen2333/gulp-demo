{"version":3,"sources":["calculator/js/wagesRes.js"],"names":["$","document","ready","r","_params","JSON","parse","RegExp","reg","getQueryString","name","substr","match","window","location","wagesRes","init","this","recalculation","_ssMinimumStandard","_ssHightestStandard","grossPay","_ssBase","ssBase","_grossPay","_pfBase","pfBase","_medicalInsurance","_endowmentInsurance","_unemploymentInsurance","_accumulationFund","_ssTotal","_personTotal","$detail","$summary","text","formatMoney","find","_tax","children","ssTotal","_money","Number","on"],"mappings":"aAAAA,EAAEC,UAAUC,MAAM,WAOd,IAPFD,EACAE,EAMEC,EAAAC,KAAAC,OAPFL,EAAUC,IAAMK,OAAA,QAOd,SAPwB,gBAAA,KAEpBC,OADNL,EAASM,OAAAA,SAAeC,OAAMC,OAAA,GAAAC,MAAAJ,IAEpBK,SAAOC,EAAAA,IAEX,OASNC,GAGAA,KAAgB,WADZA,GACJA,KAASC,mBAELC,KAAAC,iBAEFH,iBAAA,WAJF,IAOMI,EAAqB,MAErBC,EAAAA,OAAAA,EAAJC,UAKIC,EAA6B,IAAnBlB,EAAQmB,OAAgBC,EAAYJ,EAAsBA,EAAsBI,EAdhG,KAgBMC,EAAU,IAAQC,EAGlBC,EAA8B,IAAVL,EADpBM,EAAgC,KAAVN,EACtBK,EAA8B,KALD,IAAnBvB,EAAQmB,OAAgBC,EAAYJ,EANzB,MAMqEI,EARhG,MAcMK,EAAAA,EAAyBP,EAAiBO,EAC1CC,EAAAA,EAAAA,IAAoBL,EAAUK,GAC9BC,EAAWH,EAAsBD,EAAAA,EAEjCK,EAAAA,EAAAA,YAGAC,EAAUjC,EAAE,WADhBkC,EAAIA,KAAAA,YAAaC,KAAjB,MAAAC,YAAAZ,GAAA,KACAU,EAAID,KAAUjC,iBAAdmC,KAAAC,YAAAZ,EAAAQ,GAAA,KACAE,EAAAA,KAAA,uBAAAC,KAAAC,YAAAR,IACAM,EAAAA,KAAA,qBAA+BC,KAAQC,YAAYZ,IACnDS,EAAQI,KAAK,0BAAuBF,KAAKC,YAAYR,IACrDK,EAAQI,KAAK,qBAAqBF,KAAKC,YAAYT,IACnDM,EAAQI,KAAK,YAAAF,KAAAC,YAA0BD,IACvCF,EAAQI,KAAK,QAAAF,KAAAC,YAAbE,IACAL,EAAAA,UAAAM,SAAa,QAAbJ,KAA8BC,YAAYL,KAE1C/B,IAAYuC,SAASC,GA9BvB,IAAAC,EAAAC,OAAAtC,EAAAiB,UAAAmB,EAmDIF,OAlBFG,GAAaC,KACTJ,EACDG,GAAe,IAChB,KAAAA,EAAA,MACKA,GAAGA,IAEgB,IAAnBA,EAAGA,KAAgB,GAC1BA,GAAA,MAC2B,IAAjBA,EAAS,KAAc,IAA/B,GACKA,GAAGA,MACiB,KAAjBA,EAAS,OAAe,IAAsB,IAAtD,GACKA,GAAGA,MACkB,IAAlBA,EAAS,OAAV,KAAkD,IAAsB,IAA/E,GACKA,GAAGA,MACkB,KAAlBA,EAAS,OAAgB,IAAwB,KAAuB,IAAsB,IAAtG,GAE0B,KAAlBA,EAAS,OAAgB,KAAyB,IAAwB,KAAwB,IAAsB,IAAhI,IAIF1B,cAAA,WArBFf,EAAA,WAAA2C,GAAA,QAAA,WAuBA5B,OAASG,QAAAA,WAGNH,EAFDC","file":"../../../calculator/js/wagesRes.js","sourcesContent":["$(document).ready(function(){\n  function getQueryString(name) {\n    var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i');\n    var r = window.location.search.substr(1).match(reg);\n    if (r != null) {\n        return unescape(r[2]);\n    }\n    return null;\n  }\n  var _params = JSON.parse(getQueryString('params'));\n\n  // grossPay 税前工资\n  // pfBase 公积金基数 0（统一标准：税前工资）1（最低标准：深圳2130）\n  // ssBase 社保基数 0（统一标准：税前工资）1（最低标准：深圳2130）\n  // taxThreshold 个税起征点\n\n  var wagesRes = {};\n  wagesRes.init = function() {\n    if (_params) {\n      this.wagesCalculation(); // 计算个税及五险一金\n    }\n    this.recalculation();\n  }\n  wagesRes.wagesCalculation = function() {\n    var _ssMinimumStandard = 2130; // 社保最低标准\n    var _pfMinimumStandard = 2030; // 公积金最低标准\n    var _ssHightestStandard = 22440; // 社保最高标准\n    var _pfHightestStandard = 37400; // 公积金最高标准\n    var _grossPay = Number(_params.grossPay); // 税前工资\n\n    // 社保基数\n    var _ssBase = _params.ssBase === 0 ? (_grossPay > _ssHightestStandard ? _ssHightestStandard : _grossPay) : _ssMinimumStandard;\n    // 公积金基数\n    var _pfBase = _params.pfBase === 0 ? (_grossPay > _ssHightestStandard ? _pfHightestStandard : _grossPay) : _pfMinimumStandard;\n\n    var _endowmentInsurance = _ssBase * 0.08; // 养老保险\n    var _medicalInsurance = _ssBase * 0.02; // 医疗保险\n    var _unemploymentInsurance = _ssBase * 0.005; // 失业保险\n    var _accumulationFund = _pfBase * 0.05; //公积金\n    var _ssTotal = _endowmentInsurance + _medicalInsurance + _unemploymentInsurance;\n    var _tax = wagesRes.tax(_ssTotal + _accumulationFund);\n    var _personTotal = _accumulationFund + _ssTotal + _tax;\n\n    var $summary = $('.summary');\n    var $detail = $('.detail');\n    $summary.find('.remarks').text(`税前：${formatMoney(_grossPay)}元`);\n    $summary.find('.summaryMoney').text(`${formatMoney(_grossPay - _personTotal)}元`);\n    $detail.find('.endowmentInsurance').text(formatMoney(_endowmentInsurance));\n    $detail.find('.medicalInsurance').text(formatMoney(_medicalInsurance));\n    $detail.find('.unemploymentInsurance').text(formatMoney(_unemploymentInsurance));\n    $detail.find('.accumulationFund').text(formatMoney(_accumulationFund));\n    $detail.find('.ssTotal').text(formatMoney(_ssTotal));\n    $detail.find('.tax').text(formatMoney(_tax));\n    $('.total').children('span').text(formatMoney(_personTotal));\n  }\n  wagesRes.tax = function(ssTotal) {\n    var _money = Number(_params.grossPay) - ssTotal;\n    var _tax = 0;\n    if(_money <= 3500){\n      _tax = 0;\n    } else if(_money <= 5000) {\n      _tax = (_money - 3500) * 0.03;\n    } else if(_money <= 8000) {\n    //假设工资7000块，计算时需要注意5000以下的部分按0.03计算，5001~8000部分按0.1计算，所以计算表达式如下\n      _tax = (_money - 5000) * 0.1 + (5000 - 3500) * 0.03;\n    } else if(_money <= 12500) {\n      _tax = (_money - 8000) * 0.2 + (8000 - 5000) * 0.1 + (5000 - 3500) * 0.03;\n    } else if(_money <= 38500){\n      _tax = (_money - 12500) * 0.25 + (12500 - 8000) * 0.2 + (8000 - 5000) * 0.1 + (5000 - 3500) * 0.03;\n    } else if(_money <= 58500) {\n      _tax = (_money - 38500) * 0.3 + (38500 - 12500) * 0.25 + (12500 - 8000) * 0.2 +(8000 - 5000) * 0.1 + (5000 - 3500) * 0.03;\n    } else if(_money <= 83500) {\n      _tax = (_money - 58500) * 0.35 + (58500 - 38500) * 0.3 + (38500 - 12500) * 0.25 + (12500 - 8000) * 0.2 + (8000 - 5000) * 0.1 + (5000 - 3500) * 0.03;\n    } else {\n      _tax = (_money - 83500) * 0.45 + (83500 - 58500) * 0.35 + (58500 - 38500) * 0.3 + (38500 - 12500) * 0.25 + (12500 - 8000) * 0.2 + (8000 - 5000) * 0.1 + (5000 - 3500) * 0.03;\n    }\n    return _tax;\n  }\n  wagesRes.recalculation = function() {\n    $('#submit').on('click',function() {\n      window.history.back();\n    })\n  }\n  wagesRes.init();\n});"]}